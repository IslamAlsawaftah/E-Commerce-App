// <auto-generated />
using Cosmetic_Store.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cosmetic_Store.Migrations
{
    [DbContext(typeof(CosmeticDBContext))]
    partial class CosmeticDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cosmetic_Store.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Mascara is a makeup product that aims to lengthen, enhance, and define eyelashes.",
                            Name = "Mascara"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Lipstick is makeup that makes your lips look darker, redder, or shinier.",
                            Name = "Lipstick"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Face powder is a cosmetic product applied to the face to serve different functions, typically to beautify the face.",
                            Name = "Powder"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Foundation is a liquid, cream, or powder makeup applied to the face and neck to create an even, uniform color to the complexion, cover flaws and, sometimes, to change the natural skin tone.",
                            Name = "Foundation"
                        });
                });

            modelBuilder.Entity("Cosmetic_Store.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Waterproof mascara is a form of mascara that doesn't get washed off with water easily.",
                            Name = "Waterproof Mascara",
                            Price = 7.5f
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "A tubular, volumizing mascara that forms a water-resistant, 360-degree coating around lashes, dries instantly and cannot smudge or smear.",
                            Name = "Volumizing Mascara",
                            Price = 8.5f
                        },
                        new
                        {
                            ProductId = 3,
                            Description = " A kind of paint that dries to a shiny finish.",
                            Name = "Glossy",
                            Price = 3.5f
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "Lip liner, also known as a lip pencil, is a cosmetic product. It is intended to fill in uneven areas on the outer edges of the lips before applying lipstick to give a smoother shape.",
                            Name = "Lip Liner",
                            Price = 5f
                        });
                });

            modelBuilder.Entity("Cosmetic_Store.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCatedories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("Cosmetic_Store.Models.ProductCategory", b =>
                {
                    b.HasOne("Cosmetic_Store.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cosmetic_Store.Models.Product", "Product")
                        .WithMany("ProductCatedories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Cosmetic_Store.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Cosmetic_Store.Models.Product", b =>
                {
                    b.Navigation("ProductCatedories");
                });
#pragma warning restore 612, 618
        }
    }
}
